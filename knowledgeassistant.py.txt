import os
os.environ['OPENAI_API_KEY'] = '<API KEY>'

from openai import OpenAI
import json

OpenAI.api_key = os.getenv('OPENAI_API_KEY')
client = OpenAI()

# Step 1: Retrieve the assistant
assistant_list = client.beta.assistants.list()

# Select the desired assistant based on its ID or other criteria
desired_assistant = None
for assistant in assistant_list.data:
  if assistant.id == "asst_CoQDZzoRpoQmTCnsQSETQbz8":
    desired_assistant = assistant
    break

# Use the desired assistant for further operations
if desired_assistant:
  print(f"Found assistant: {desired_assistant}")
else:
  print("Assistant not found")


# Step 2: Create a Thread
my_thread = client.beta.threads.create()
print(f"This is the thread object: {my_thread} \n")

# Add product_data.json to the thread (this is optional based on LLM results)
'''
with open("product_data.json", "r") as file:
    product_data = json.load(file)
# Stringify the product_data
product_data_str = json.dumps(product_data)
'''

# Step 3: Add a Message to a Thread
my_thread_message = client.beta.threads.messages.create(
  thread_id=my_thread.id,
  role="user", 
  content="I am a home owner. What equipments do I need to install garage storage cabinets? To answer this question first look into wherever you can to determine the equipments needed to accomplish my ask, and then search similar equipments from the product_data.json.",
)

print(f"This is the message object: {my_thread_message} \n")

# Step 4: Run the Assistant
my_run = client.beta.threads.runs.create(
  thread_id=my_thread.id,
  assistant_id=desired_assistant.id,
  instructions="To answer user questions first look into wherever you can to determine the equipments needed to accomplish my ask, and then search similar equipments from the product_data.json.",
  tools=[{"type": "retrieval"}]
)
print(f"This is the run object: {my_run} \n")

# Step 5: Periodically retrieve the Run to check on its status to see if it has moved to completed
while my_run.status != "completed":
    keep_retrieving_run = client.beta.threads.runs.retrieve(
        thread_id=my_thread.id,
        run_id=my_run.id
    )
    print(f"Run status: {keep_retrieving_run.status}")

    if keep_retrieving_run.status == "completed":
        print("\n")
        break

# Step 6: Retrieve the Messages added by the Assistant to the Thread
all_messages = client.beta.threads.messages.list(
  thread_id=my_thread.id
)

print(f"The run steps are: {my_run}")

print("------------------------------------------------------------ \n")

print(f"User: {my_thread_message.content[0].text.value}")
print(f"Assistant: {all_messages.data[0].content[0].text.value}")




